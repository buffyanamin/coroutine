#
# Author: github.com/luncliff (luncliff@gmail.com)
#
# References
#   https://docs.microsoft.com/en-us/azure/devops/pipelines/process/templates
#   https://developer.microsoft.com/en-us/windows/downloads/sdk-archive/
#   https://github.com/actions/virtual-environments/tree/main/images
#   https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted
#

trigger:
  branches:
    exclude:
      - docs
      - gh-pages

schedules:
  - cron: "30 6 * * 4"
    displayName: "Weekly check"
    branches:
      include:
        - main

variables:
  - name: vcpkg.commit
    value: "c64c0fdac572ca43ea5ae018fc408ddced50d5b1" # mainstream 2022.02.02

jobs:
  - job: vs2022_msvc142
    pool:
      vmImage: "windows-2022"
    variables:
      configuration: Debug
      # vcpkg.root: "C:/vcpkg"
    steps:
      - task: Cache@2
        inputs:
          key: '2022-03 | vcpkg-x64 | "$(Agent.OS)"'
          path: "c:/vcpkg/installed"
      - task: run-vcpkg@0
        inputs:
          vcpkgArguments: "catch2 ms-gsl spdlog"
          vcpkgGitCommitId: $(vcpkg.commit)
        env:
          VCPKG_DEFAULT_TRIPLET: x64-windows
      - task: CMake@1
        displayName: "CMake: Configure"
        inputs:
          cmakeArgs: --preset x64-msvc-debug -DCMAKE_INSTALL_PREFIX:PATH="$(Build.ArtifactStagingDirectory)"
          workingDirectory: "."
      - task: MSBuild@1
        inputs:
          solution: "build-x64-windows/coroutine.sln"
          msbuildArchitecture: x64
          platform: x64
          configuration: $(configuration)
          msbuildArguments: "/p:platformtoolset=v142"
      - task: CMake@1
        displayName: "CMake: Install"
        inputs:
          cmakeArgs: --build --preset x64-msvc-debug --target install
          workingDirectory: "."
      # - powershell: ctest --preset x64-msvc-debug --output-on-failure
      #   displayName: "CTest"

  - job: vs2022_clangcl
    pool:
      vmImage: "windows-2022"
    steps:
      - task: ChocolateyCommand@0
        inputs:
          command: "install"
          installPackageId: "ninja"
          installInstallArgs: "--no-progress --yes"
      - task: Cache@2
        inputs:
          key: '2022-03 | vcpkg-x86 | "$(Agent.OS)"'
          path: "c:/vcpkg/installed"
      - task: run-vcpkg@0
        inputs:
          vcpkgArguments: "catch2 ms-gsl spdlog"
          vcpkgGitCommitId: $(vcpkg.commit)
        env:
          VCPKG_DEFAULT_TRIPLET: x86-windows
      - task: CMake@1
        displayName: "CMake: Configure"
        inputs:
          cmakeArgs: --preset x86-clang-debug -DCMAKE_INSTALL_PREFIX:PATH="$(Build.ArtifactStagingDirectory)"
          workingDirectory: "."
      - task: CMake@1
        displayName: "CMake: Install"
        inputs:
          cmakeArgs: --build --preset x86-clang-debug --target install
          workingDirectory: "."

  - job: macos15_appleclang
    pool:
      vmImage: "macos-10.15"
    # variables:
    #   vcpkg.root: "/usr/local/share/vcpkg"
    steps:
      - powershell: brew install ninja
        displayName: "Setup: Homebrew packages"
      - task: run-vcpkg@0
        inputs:
          vcpkgArguments: "catch2 ms-gsl spdlog"
          vcpkgGitCommitId: $(vcpkg.commit)
        env:
          VCPKG_DEFAULT_TRIPLET: x64-osx
      - task: CMake@1
        displayName: "CMake: Configure"
        inputs:
          cmakeArgs: --preset x64-osx-debug -DCMAKE_INSTALL_PREFIX:PATH="$(Build.ArtifactStagingDirectory)"
          workingDirectory: "."
      # - task: CMake@1
      #   displayName: "CMake: Build/Install"
      #   inputs:
      #     cmakeArgs: --build --preset x64-osx-debug --target install
      #     workingDirectory: "."
      # - powershell: ctest --preset x64-osx-debug --output-on-failure
      #   displayName: "CTest"

  - job: ubuntu20_gcc
    pool:
      vmImage: "ubuntu-20.04"
    # variables:
    #   vcpkg.root: "/usr/local/share/vcpkg"
    steps:
      - powershell: sudo apt-get install -y gcc-10 g++-10
        displayName: "Install APT packages"
      - task: run-vcpkg@0
        inputs:
          vcpkgArguments: "catch2 ms-gsl spdlog"
          vcpkgGitCommitId: $(vcpkg.commit)
        env:
          VCPKG_DEFAULT_TRIPLET: x64-linux
      - task: CMake@1
        displayName: "CMake: Configure"
        inputs:
          cmakeArgs: --preset x64-linux-debug -DCMAKE_INSTALL_PREFIX:PATH="$(Build.ArtifactStagingDirectory)"
          workingDirectory: "."

  - job: mkdocs
    pool:
      vmImage: "macos-10.15"
    steps:
      - powershell: |
          brew install doxygen
          python3 -m pip install --user -r requirements.txt
        displayName: "Setup: Homebrew, Python3 packages"
      - powershell: |
          wget -q https://github.com/matusnovak/doxybook2/releases/download/v1.4.0/doxybook2-osx-amd64-v1.4.0.zip
          unzip ./doxybook2-osx-amd64-v1.4.0.zip -d externals
        displayName: "Setup: Doxybook2 1.4.0"
      - powershell: |
          doxygen ./docs/Doxyfile
          ./externals/bin/doxybook2 --input ./docs/xml --output ./docs
        displayName: "Run Doxygen and Doxybook2"
      - powershell: python3 -m mkdocs build # todo: gh-deploy
      # - task: ArchiveFiles@2
      #   inputs:
      #     rootFolderOrFile: "$(Build.SourcesDirectory)/docs"
      #     includeRootFolder: false
      #     archiveType: "zip"
      #     archiveFile: "$(Build.ArtifactStagingDirectory)/docs.zip"
      #     replaceExistingArchive: true
      - task: PublishBuildArtifacts@1
        inputs:
          # PathtoPublish: "$(Build.ArtifactStagingDirectory)"
          PathtoPublish: "$(Build.SourcesDirectory)/docs"
          ArtifactName: "docs"
    dependsOn:
      - vs2022_msvc142
      - vs2022_clangcl
      - macos15_appleclang
      - ubuntu20_gcc
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
